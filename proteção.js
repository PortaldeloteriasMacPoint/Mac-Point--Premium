 (async function() { const MAX_ATTEMPTS = 3; let attemptCount = 0;

function createAlert(message) { if(document.getElementById('customAlert')) return; const overlay = document.createElement('div'); overlay.id = 'customAlert'; overlay.style.cssText =  position:fixed;top:0;left:0;width:100%;height:100%; background:rgba(0,0,0,0.95);display:flex;align-items:center; justify-content:center;z-index:9999;opacity:0;transition:opacity 0.5s;; overlay.innerHTML =  <div style="background:#111;padding:30px 40px;border-radius:20px; text-align:center;font-family:Arial,sans-serif;max-width:450px; color:#fff;box-shadow:0 8px 25px rgba(0,0,0,0.5);position:relative; transform:translateY(-50px);transition:transform 0.5s;"> <h2 style="color:#ff6600;margin-bottom:15px;">⚠️ Acesso não autorizado!</h2> <p style="margin-bottom:20px;font-size:16px;">${message}</p> <p style="margin-bottom:20px;font-size:14px;">Tentativas: ${attemptCount}/${MAX_ATTEMPTS}</p> <button id="alertBtn" style=" padding:12px 25px;font-size:16px;background:#ff6600;color:#fff; border:none;border-radius:10px;cursor:pointer;transition:all 0.3s;">OK</button> </div>; document.body.appendChild(overlay); requestAnimationFrame(() => { overlay.style.opacity = '1'; overlay.firstElementChild.style.transform = 'translateY(0)'; }); const closeFn = () => { overlay.style.opacity = '0'; overlay.firstElementChild.style.transform = 'translateY(-50px)'; setTimeout(() => { window.location.href = 'index.html'; }, 500); }; overlay.querySelector('#alertBtn').addEventListener('click', closeFn); window.addEventListener('keydown', e => { if(e.key === 'Escape') closeFn(); }); }

function logAttempt() { attemptCount++; console.clear(); createAlert('Tentativa de acesso não autorizado detectada!'); if(attemptCount >= MAX_ATTEMPTS) createAlert('Múltiplas tentativas detectadas! Redirecionando...'); }

function activateConsoleProtection() { ['contextmenu','selectstart','dragstart','copy','cut'].forEach(ev => document.addEventListener(ev, e => { e.preventDefault(); logAttempt(); }) ); document.addEventListener('keydown', e => { const forbidden = e.key === 'F12' || (e.ctrlKey && e.shiftKey && ['I','J','C'].includes(e.key)) || (e.ctrlKey && ['U','S','P'].includes(e.key)) || (e.metaKey && ['I','U'].includes(e.key)); if (forbidden) logAttempt(); }, true); (function() { const stub = function(){ logAttempt(); }; ['log','warn','info','error','debug','table','dir'].forEach(f => console[f] = stub); setInterval(() => { const widthDiff = window.outerWidth - window.innerWidth; const heightDiff = window.outerHeight - window.innerHeight; if (widthDiff > 160 || heightDiff > 160) logAttempt(); }, 500); setInterval(() => { debugger; }, 2000); })(); }

function addTokensToLinks() { const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'; document.querySelectorAll('a[href]').forEach(link => { const url = link.getAttribute('href'); if(!url.startsWith('#') && !url.startsWith('javascript:')) { const token = 'mac' + Array.from({length:8}, () => chars[Math.floor(Math.random()*chars.length)]).join(''); const sep = url.includes('?') ? '&' : '?'; link.setAttribute('href', url + sep + 'token=' + token); } }); }

function addAntiCacheMeta() { const head = document.head || document.getElementsByTagName('head')[0]; ["Cache-Control:no-cache, no-store, must-revalidate","Pragma:no-cache","Expires:0"].forEach(meta => { const m = document.createElement('meta'); const [key,val] = meta.split(':'); m.httpEquiv = key; m.content = val; head.appendChild(m); }); }

function loadProtection1() { const head = document.head || document.getElementsByTagName('head')[0]; const script = document.createElement('script'); script.src = 'protecao1.js?v=' + new Date().getTime(); head.appendChild(script); }

fetch('verifica_email.php') .then(res => res.json()) .then(data => { if(data.autorizado) { console.info('Acesso liberado para usuário autorizado.'); } else { activateConsoleProtection(); addAntiCacheMeta(); addTokensToLinks(); loadProtection1(); } }) .catch(err => { console.error('Erro ao verificar email:', err); activateConsoleProtection(); addAntiCacheMeta(); addTokensToLinks(); loadProtection1(); }); })();

